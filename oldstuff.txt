
// void Lanes::advance(bool ns_red, bool ew_red){
//
// 	//ns traffic light is green
// 	if(!ns_red){
// 		//advance ns lanes
// 		//first remove whatever is in the last section, it is out of the simulation
// 		nb_lane[lane_len - 1] = nullptr;
//
// 		//iterate backwards through the nb vector
// 		for(int i = lane_len - 2; i > -1; i--){
// 			//check that there is something in the section
// 			if(nb_lane[i] != nullptr){
// 				// cout << i << endl;
// 				//if we are looking at section past the intersection:
// 				//20 - 11
// 				if(i >= (lane_len/2)){
// 					//make sure the next section is clear
// 					if(nb_lane[i+1] == nullptr){
// 						//advance
// 						nb_lane[i+1] = nb_lane[i];
// 						nb_lane[i] = nullptr;
// 					}
// 				//if we are looking at the section where turns happen
// 				//10
// 			}else if(i == (lane_len/2)-1){
// 					cout << "turn" << endl;
// 					cout << i << endl;
// 					//if we see a right turn
// 					if(nb_lane[i]->getVehicleTurn() == Turn::right){
// 						//advance
// 						eb_lane[i+2] = nb_lane[i];
// 						nb_lane[i] = nullptr;
// 					}else{
// 						//not turn
// 						//make sure the next section is clear
// 						if(nb_lane[i+1] != nullptr){
// 							//advance
// 							nb_lane[i+1] = nb_lane[i];
// 							nb_lane[i] = nullptr;
// 						}
// 					}
// 				//must be a section before the intersection
// 				//0-9
// 				}else{
// 					//make sure next section is clear
// 					if(nb_lane[i+1] == nullptr){
// 						//advance
// 						nb_lane[i+1] = nb_lane[i];
// 						nb_lane[i] = nullptr;
// 					}
// 				}
// 			}
// 		}
// 	}
// }//function

void Lanes::advanceNorth(bool ns_red, bool ew_red){

	//ns traffic light is green
	if(!ns_red){
		//advance ns lanes
		//first remove whatever is in the last section, it is out of the simulation
		nb_lane[lane_len - 1] = nullptr;

		//iterate backwards through the nb vector
		for(int i = lane_len - 2; i > -1; i--){
			//check that there is something in the section
			if(nb_lane[i] != nullptr){
				if(i == (lane_len/2)-1){
					cout << "here" << endl;
					if(nb_lane[i]->getVehicleTurn() == Turn::right){
						eb_lane[i+2] = nb_lane[i];
						nb_lane[i] = nullptr;
					}else{
						if(nb_lane[i+1] == nullptr){
								//advance
							nb_lane[i+1] = nb_lane[i];
							nb_lane[i] = nullptr;
						}
					}
				}else{
					if(nb_lane[i+1] == nullptr){
							//advance
						nb_lane[i+1] = nb_lane[i];
						nb_lane[i] = nullptr;
					}
				}
			}
		}
	}
}

void Lanes::advanceSouth(bool ns_red, bool ew_red){

	//ns traffic light is green
	if(!ns_red){
		//advance ns lanes
		//first remove whatever is in the last section, it is out of the simulation
		sb_lane[lane_len - 1] = nullptr;

		//iterate backwards through the nb vector
		for(int i = lane_len - 2; i > -1; i--){
			//check that there is something in the section
			if(sb_lane[i] != nullptr){
				if(i == (lane_len/2)-1){
					cout << "here" << endl;
					if(sb_lane[i]->getVehicleTurn() == Turn::right){
						wb_lane[i+2] = sb_lane[i];
						sb_lane[i] = nullptr;
					}else{
						if(sb_lane[i+1] == nullptr){
								//advance
							sb_lane[i+1] = sb_lane[i];
							sb_lane[i] = nullptr;
						}
					}
				}else{
					if(sb_lane[i+1] == nullptr){
							//advance
						sb_lane[i+1] = sb_lane[i];
						sb_lane[i] = nullptr;
					}
				}
			}
		}
	}
}

void Lanes::advanceWest(bool ns_red, bool ew_red){

	//ns traffic light is green
	if(!ew_red){
		//advance ns lanes
		//first remove whatever is in the last section, it is out of the simulation
		wb_lane[lane_len - 1] = nullptr;

		//iterate backwards through the nb vector
		for(int i = lane_len - 2; i > -1; i--){
			//check that there is something in the section
			if(wb_lane[i] != nullptr){
				if(i == (lane_len/2)-1){
					cout << "here" << endl;
					if(wb_lane[i]->getVehicleTurn() == Turn::right){
						nb_lane[i+2] = wb_lane[i];
						wb_lane[i] = nullptr;
					}else{
						if(wb_lane[i+1] == nullptr){
								//advance
							wb_lane[i+1] = wb_lane[i];
							wb_lane[i] = nullptr;
						}
					}
				}else{
					if(wb_lane[i+1] == nullptr){
							//advance
						wb_lane[i+1] = wb_lane[i];
						wb_lane[i] = nullptr;
					}
				}
			}
		}
	}
}

void Lanes::advanceEast(bool ns_red, bool ew_red){

	//ns traffic light is green
	if(!ew_red){
		//advance ns lanes
		//first remove whatever is in the last section, it is out of the simulation
		eb_lane[lane_len - 1] = nullptr;

		//iterate backwards through the nb vector
		for(int i = lane_len - 2; i > -1; i--){
			//check that there is something in the section
			if(eb_lane[i] != nullptr){
				if(i == (lane_len/2)-1){
					//make a turn here
					if(eb_lane[i]->getVehicleTurn() == Turn::right){
						sb_lane[i+2] = eb_lane[i];
						eb_lane[i] = nullptr;
					}else{
						if(eb_lane[i+1] == nullptr){
								//advance
							eb_lane[i+1] = eb_lane[i];
							eb_lane[i] = nullptr;
						}
					}
				}else{
					if(eb_lane[i+1] == nullptr){
							//advance
						eb_lane[i+1] = eb_lane[i];
						eb_lane[i] = nullptr;
					}
				}
			}
		}
	}
}



// void Lanes::new_vehicle(VehicleBase* vb){
//
// 	switch (vb->getVehicleOriginalDirection()) {
//
// 		case Direction::north:
// 			for(int j = 0; j < nb_q.size(); j++){
// 				if(nb_q[j] == nullptr){
// 					for(int i = j; i < j + vb->get_len(); i++){
// 						nb_q[i] = vb;
// 					}return;
// 				}
// 			}
//
//
// 		case Direction::south:
// 			for(int j = 0; j < sb_q.size(); j++){
// 				if(sb_q[j] == nullptr){
// 					for(int i = j; i < j + vb->get_len(); i++){
// 						sb_q[i] = vb;
// 					}return;
// 				}
// 			}
//
//
// 		case Direction::west:
// 			for(int j = 0; j < wb_q.size(); j++){
// 				if(wb_q[j] == nullptr){
// 					for(int i = j; i < j + vb->get_len(); i++){
// 						wb_q[i] = vb;
// 					}return;
// 				}
// 			}
//
// 		case Direction::east:
// 			for(int j = 0; j < eb_q.size(); j++){
// 				if(eb_q[j] == nullptr){
// 					for(int i = j; i < j + vb->get_len(); i++){
// 						eb_q[i] = vb;
// 					}return;
// 				}
// 			}
//
//
// 	}
// 	return;
// }
